{"version":3,"sources":["serviceWorker.js","olaf/history.js","olaf/redux/reducers/BeeReducer.js","olaf/redux/store.js","olaf/components/MyObject.js","olaf/views/Home.js","olaf/App.js","index.js"],"names":["Boolean","window","location","hostname","match","createBrowserHistory","initialState","selector","childSelector","categories","id","text","showUploadDialog","BeeReducer","state","action","type","category","map","i","flag","store","createStore","combineReducers","applyMiddleware","createLogger","thunk","MyObject","props","editor","useMemo","withReact","createEditor","useState","children","value","setValue","onChange","Home","count","items","Array","from","length","v","k","content","onDragEnd","bind","result","destination","list","startIndex","endIndex","splice","removed","reorder","this","source","index","setState","droppableId","provided","snapshot","droppableProps","ref","innerRef","style","isDraggingOver","background","padding","item","key","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","placeholder","Component","App","history","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.523e7289.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","const initialState = {\r\n    selector: 0,\r\n    childSelector: -1,\r\n    categories: [\r\n        { id: 0, text: 'Category A' },\r\n        { id: 1, text: 'Category B' },\r\n        { id: 2, text: 'Category C' },\r\n        { id: 3, text: 'Category D' },\r\n    ],\r\n    showUploadDialog: false\r\n};\r\n\r\nconst BeeReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case \"SET_SELECTOR\":\r\n            return {\r\n\t\t\t\t...state,\r\n\t\t\t\tselector: action.selector\r\n            };\r\n        case \"ADD_CATEGORY\":\r\n            return {\r\n                ...state,\r\n                categories: [...state.categories, action.category]\r\n            }\r\n        case \"UPDATE_CATEGORY\":\r\n            return {\r\n                ...state,\r\n                categories: state.categories.map(\r\n                    (category, i) => i === action.category.id ? {...category, text: action.category.text}\r\n                                            : category)\r\n            }\r\n        case \"SHOW_UPLOAD_DIALOG\":\r\n            return {\r\n                ...state,\r\n                showUploadDialog: action.flag\r\n            }\r\n        case \"SET_CHILD_SELECTOR\":\r\n            return {\r\n                ...state,\r\n                childSelector: action.childSelector\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default BeeReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport BeeReducer from './reducers/BeeReducer';\r\n\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n    combineReducers({ BeeReducer }),\r\n    initialState,\r\n    applyMiddleware(createLogger(), thunk)\r\n);\r\n\r\nexport default store;","import React, { useEffect, useMemo, useState } from \"react\";\r\n// Import the Slate editor factory.\r\nimport { createEditor } from 'slate'\r\n\r\n// Import the Slate components and React plugin.\r\nimport { Slate, Editable, withReact } from 'slate-react'\r\n\r\nconst MyObject = (props) => {\r\n    const editor = useMemo(() => withReact(createEditor()), []);\r\n    // Add the initial value when setting up our state.\r\n    const [value, setValue] = useState([\r\n      {\r\n        type: 'paragraph',\r\n        children: [{ text: props.text }],\r\n      },\r\n    ])\r\n  \r\n    return (\r\n      <Slate editor={editor} value={value} onChange={value => setValue(value)}>\r\n        <Editable />\r\n      </Slate>\r\n    )\r\n}\r\n\r\nexport default MyObject;","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport MyObject from \"../components/MyObject\";\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  padding: grid,\r\n});\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: getItems(10)\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  }\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n            >\r\n              {this.state.items.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                      )}\r\n                    >\r\n                      <MyObject text={item.content} />\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\n// Put the thing into the DOM!\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport history from './history';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\n/**\r\n * Import All Views\r\n */\r\nimport Home from './views/Home';\r\n\r\n/**\r\n * Import Styles\r\n */\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <Router history={history}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                    </Switch>\r\n                </Router>\r\n            </Provider>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './olaf/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}